// Code generated by "esc "; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		local:   "pkg/js/helpers.js",
		size:    16222,
		modtime: 0,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "pkg/js",
	},
}
